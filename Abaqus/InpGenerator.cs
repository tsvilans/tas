using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using Rhino.Geometry;


namespace tas.Abaqus
{
    public class InpGenerator
    {
        public List<Assembly> Assemblies;
        public List<Part> Parts;
        public List<Material> Materials;
        public List<BoundaryCondition> BoundaryConditions;
        public List<Load> Loads;

        public string JobName, Author;

        public InpGenerator()
        {
            Assemblies = new List<Assembly>();
            Parts = new List<Part>();
            Materials = new List<Material>();
            BoundaryConditions = new List<BoundaryCondition>();
            Loads = new List<Load>();
            JobName = "Job-1";
        }

        public void WriteHeader(List<string> inp)
        {
            inp.Add("*Heading");
            inp.Add($"**Job name: {JobName}");
            inp.Add($"**Generated by: {Author}");
            inp.Add($"*Preprint, echo=NO, model=NO, history=NO, contact=NO");
        }

        public void WriteParts(List<string> inp)
        {
            inp.Add("**");
            inp.Add("** PARTS");
            inp.Add("**");

            foreach (Part prt in Parts)
            {
                WritePart(inp, prt);
            }
        }

        public void WritePart(List<string> inp, Part prt)
        {
            inp.Add($"*Part, name=\"{prt.Name}\"");

            inp.Add("* Node");

            foreach (Node n in prt.Nodes)
            {
                inp.Add($"    {n.Id}, {n.X}, {n.Y}, {n.Z}");
            }

            inp.Add("*Element, type=C3D8R");
            foreach (Element ele in prt.Elements)
            {
                inp.Add($"    {ele.Id}, {ele.A}, {ele.B}, {ele.C}, {ele.D}, {ele.E}, {ele.F}, {ele.G}, {ele.H}");
            }

            inp.Add("*Nset, nset=Set-1, generate");
            inp.Add($"1, {prt.Nodes.Count}, 1");

            inp.Add("*Elset, elset=Set-1, generate");
            inp.Add($"1, {prt.Elements.Count}, 1");

            inp.Add("*Distribution, name=Ori-1-DiscOrient, location=ELEMENT, Table=Ori-1-DiscOrient_Table");
            inp.Add(", 1., 0., 0., 0., 1., 0.");

            foreach (ElementOrientation ori in prt.ElementOrientations)
            {
                inp.Add($"    {ori.Id}, {ori.Data.ZAxis.X}, {ori.Data.ZAxis.Y}, {ori.Data.ZAxis.Z}, {ori.Data.YAxis.X}, {ori.Data.YAxis.Y}, {ori.Data.YAxis.Z}, ");
            }

            inp.Add("*Orientation, name=Ori-1, system=RECTANGULAR");
            inp.Add("Ori-1-DiscOrient");
            inp.Add("1, 0");


            inp.Add("** Section: Glulam section");
            inp.Add($"*Solid Section, elset=Set-1, orientation=Ori-1, material={prt.Material.Name}");
            inp.Add(",");

            inp.Add("*End Part");
        }

        public void WriteAssemblies(List<string> inp)
        {
            inp.Add("**");
            inp.Add("** ASSEMBLIES");
            inp.Add("**");

            foreach (Assembly ass in Assemblies)
            {
                WriteAssembly(inp, ass);
            }
        }

        public void WriteAssembly(List<string> inp, Assembly ass)
        {
            inp.Add($"*Assembly, name={ass.Name}");
            inp.Add("**");

            foreach (Part prt in ass.Parts)
            {
                string instance_name = prt.Name + "-1";
                inp.Add($"*Instance, name=\"{instance_name}\", part=\"{prt.Name}\"");
                inp.Add("*End Instance");
                inp.Add("**");

                inp.Add($"*Nset, nset=Set-1, instance=\"{instance_name}\""); // Find out what these node and element sets correspond with
                inp.Add("1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12");
                inp.Add($"*Elset, elset=Set-1, instance=\"{instance_name}\"");
                inp.Add("1, 2, 3, 4, 5, 6");
            }

            inp.Add("*End Assembly");

            inp.Add("*Distribution Table, name=Ori-1-DiscOrient_Table"); // This should be a DistributionTable object
            inp.Add("coord3D, coord3D");

        }

        public void WriteMaterials(List<string> inp)
        {
            inp.Add("**");
            inp.Add("** MATERIALS");
            inp.Add("**");

            foreach(Material mat in Materials)
            {
                WriteMaterial(inp, mat);
            }

            inp.Add("**----------------");

        }

        public void WriteMaterial(List<string> inp, Material mat)
        {
            inp.Add($"*Material, name={mat.Name}");
            inp.Add("*Density");
            inp.Add($"{mat.Density}");
            inp.Add("*Elastic, type=ENGINEERING CONSTANTS");
            inp.Add($"{mat.EngineeringConstants[0]}, {mat.EngineeringConstants[1]}, {mat.EngineeringConstants[2]}, " +
                $"{mat.EngineeringConstants[3]}, {mat.EngineeringConstants[4]}, {mat.EngineeringConstants[5]}, " +
                $"{mat.EngineeringConstants[6]}, {mat.EngineeringConstants[7]}, ");
            inp.Add($"{mat.EngineeringConstants[8]}");
        }

        public void WriteStep(List<string> inp /*, Step step*/)
        {
            inp.Add("**");
            inp.Add("** STEP: Step-1");
            inp.Add("**");

            inp.Add("*Step, name=Step-1, nlgeom=NO");
            inp.Add("*Static");
            inp.Add("1., 1., 1e-05, 1.");

            WriteBoundaryConditions(inp);
            WriteLoads(inp);

            inp.Add("**");
            inp.Add("** OUTPUT REQUESTS");
            inp.Add("**");

            inp.Add("*Restart, write, frequency=0");

            inp.Add("**");
            inp.Add("** FIELD OUTPUT: F-Output-1");
            inp.Add("**");

            inp.Add("*Output, field, variable=PRESELECT");

            inp.Add("**");
            inp.Add("** HISTORY OUTPUT: H-Output-1");
            inp.Add("**");

            inp.Add("*Output, history, variable=PRESELECT");

            inp.Add("*End Step");
        }

        public void WriteBoundaryConditions(List<string> inp)
        {
            inp.Add("**");
            inp.Add("** BOUNDARY CONDITIONS");
            inp.Add("**");
            
            foreach(BoundaryCondition bc in BoundaryConditions)
            {
                WriteBoundaryCondition(inp, bc);
            }
        }

        public void WriteBoundaryCondition(List<string> inp, BoundaryCondition bc)
        {
            inp.Add($"** Name: {bc.Name} Type: {bc.Type}");
            inp.Add("*Boundary");
            inp.Add("Set-1, 1, 1");
            inp.Add("Set-1, 2, 2");
            inp.Add("Set-1, 3, 3");
        }

        public void WriteLoads(List<string> inp)
        {
            inp.Add("**");
            inp.Add("** LOADS");
            inp.Add("**");

            foreach (Load lo in Loads)
            {
                WriteLoad(inp, lo);
            }
        }

        public void WriteLoad(List<string> inp, Load lo)
        {
            inp.Add($"** Name: {lo.Name} Type: {lo.Type}");
            inp.Add("*Dload");
            inp.Add(", GRAV, 9.8, 0., 0., -1.");
        }

        public List<string> Generate()
        {
            List<string> inp = new List<string>();

            WriteHeader(inp);

            // Write all parts
            WriteParts(inp);

            // Write all assemblies
            WriteAssemblies(inp);

            // Write all materials
            WriteMaterials(inp);

            // Write all steps with associated boundary conditions and loads
            WriteStep(inp);

            return inp;
        }
    }
}
